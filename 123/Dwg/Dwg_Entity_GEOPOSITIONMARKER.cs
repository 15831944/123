//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Dwg_Entity_GEOPOSITIONMARKER : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dwg_Entity_GEOPOSITIONMARKER(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dwg_Entity_GEOPOSITIONMARKER obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dwg_Entity_GEOPOSITIONMARKER() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibreDWGPINVOKE.delete_Dwg_Entity_GEOPOSITIONMARKER(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Dwg_Object_Entity parent {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_parent_set(swigCPtr, Dwg_Object_Entity.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_parent_get(swigCPtr);
      Dwg_Object_Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Entity(cPtr, false);
      return ret;
    } 
  }

  public ushort type {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_type_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_type_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD position {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_position_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_position_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD extrusion {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_extrusion_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_extrusion_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public double radius {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_radius_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_radius_get(swigCPtr);
      return ret;
    } 
  }

  public double landing_gap {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_landing_gap_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_landing_gap_get(swigCPtr);
      return ret;
    } 
  }

  public string text {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_text_set(swigCPtr, value);
    } 
    get {
      string ret = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_text_get(swigCPtr);
      return ret;
    } 
  }

  public ushort text_alignment {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_text_alignment_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_text_alignment_get(swigCPtr);
      return ret;
    } 
  }

  public byte mtext_visible {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_mtext_visible_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_mtext_visible_get(swigCPtr);
      return ret;
    } 
  }

  public byte enable_frame_text {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_enable_frame_text_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_enable_frame_text_get(swigCPtr);
      return ret;
    } 
  }

  public string notes {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_notes_set(swigCPtr, value);
    } 
    get {
      string ret = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_notes_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Object_Ref mtext_handle {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_mtext_handle_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_mtext_handle_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Object_Ref text_style {
    set {
      LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_text_style_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_GEOPOSITIONMARKER_text_style_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Entity_GEOPOSITIONMARKER() : this(LibreDWGPINVOKE.new_Dwg_Entity_GEOPOSITIONMARKER(), true) {
  }

}
