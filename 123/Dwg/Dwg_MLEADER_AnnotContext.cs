//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Dwg_MLEADER_AnnotContext : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dwg_MLEADER_AnnotContext(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dwg_MLEADER_AnnotContext obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dwg_MLEADER_AnnotContext() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibreDWGPINVOKE.delete_Dwg_MLEADER_AnnotContext(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort class_version {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_class_version_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_class_version_get(swigCPtr);
      return ret;
    } 
  }

  public byte has_xdic_file {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_has_xdic_file_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_has_xdic_file_get(swigCPtr);
      return ret;
    } 
  }

  public byte is_default {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_is_default_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_is_default_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Object_Ref scale_handle {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_scale_handle_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_scale_handle_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public uint num_leaders {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_num_leaders_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_num_leaders_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_LEADER_Node leaders {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_leaders_set(swigCPtr, Dwg_LEADER_Node.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_leaders_get(swigCPtr);
      Dwg_LEADER_Node ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_LEADER_Node(cPtr, false);
      return ret;
    } 
  }

  public ushort attach_dir {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_attach_dir_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_attach_dir_get(swigCPtr);
      return ret;
    } 
  }

  public double scale {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_scale_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_scale_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD content_base {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_content_base_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_content_base_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public double text_height {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_height_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_height_get(swigCPtr);
      return ret;
    } 
  }

  public double arrow_size {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_arrow_size_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_arrow_size_get(swigCPtr);
      return ret;
    } 
  }

  public double landing_gap {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_landing_gap_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_landing_gap_get(swigCPtr);
      return ret;
    } 
  }

  public ushort text_left {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_left_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_left_get(swigCPtr);
      return ret;
    } 
  }

  public ushort text_right {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_right_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_right_get(swigCPtr);
      return ret;
    } 
  }

  public ushort text_alignment {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_alignment_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_alignment_get(swigCPtr);
      return ret;
    } 
  }

  public ushort attach_type {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_attach_type_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_attach_type_get(swigCPtr);
      return ret;
    } 
  }

  public byte has_content_txt {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_has_content_txt_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_has_content_txt_get(swigCPtr);
      return ret;
    } 
  }

  public byte has_content_blk {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_has_content_blk_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_has_content_blk_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_MLEADER_Content content {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_content_set(swigCPtr, Dwg_MLEADER_Content.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_content_get(swigCPtr);
      Dwg_MLEADER_Content ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_MLEADER_Content(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD base_ {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_base__set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_base__get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD base_dir {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_base_dir_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_base_dir_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD base_vert {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_base_vert_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_base_vert_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public byte is_normal_reversed {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_is_normal_reversed_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_is_normal_reversed_get(swigCPtr);
      return ret;
    } 
  }

  public ushort text_top {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_top_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_top_get(swigCPtr);
      return ret;
    } 
  }

  public ushort text_bottom {
    set {
      LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_bottom_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_MLEADER_AnnotContext_text_bottom_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_MLEADER_AnnotContext() : this(LibreDWGPINVOKE.new_Dwg_MLEADER_AnnotContext(), true) {
  }

}
