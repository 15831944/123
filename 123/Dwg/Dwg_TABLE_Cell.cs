//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Dwg_TABLE_Cell : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dwg_TABLE_Cell(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dwg_TABLE_Cell obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dwg_TABLE_Cell() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibreDWGPINVOKE.delete_Dwg_TABLE_Cell(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ushort type {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_type_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_type_get(swigCPtr);
      return ret;
    } 
  }

  public byte flags {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_flags_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_flags_get(swigCPtr);
      return ret;
    } 
  }

  public byte merged_value {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_merged_value_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_merged_value_get(swigCPtr);
      return ret;
    } 
  }

  public byte autofit_flag {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_autofit_flag_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_autofit_flag_get(swigCPtr);
      return ret;
    } 
  }

  public uint merged_width_flag {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_merged_width_flag_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_merged_width_flag_get(swigCPtr);
      return ret;
    } 
  }

  public uint merged_height_flag {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_merged_height_flag_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_merged_height_flag_get(swigCPtr);
      return ret;
    } 
  }

  public double rotation_value {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_rotation_value_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_rotation_value_get(swigCPtr);
      return ret;
    } 
  }

  public string text_string {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_text_string_set(swigCPtr, value);
    } 
    get {
      string ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_text_string_get(swigCPtr);
      return ret;
    } 
  }

  public double block_scale {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_block_scale_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_block_scale_get(swigCPtr);
      return ret;
    } 
  }

  public byte additional_data_flag {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_additional_data_flag_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_additional_data_flag_get(swigCPtr);
      return ret;
    } 
  }

  public ushort attr_def_index {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_attr_def_index_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_attr_def_index_get(swigCPtr);
      return ret;
    } 
  }

  public string attr_def_text {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_attr_def_text_set(swigCPtr, value);
    } 
    get {
      string ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_attr_def_text_get(swigCPtr);
      return ret;
    } 
  }

  public byte additional_data_flag2 {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_additional_data_flag2_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_additional_data_flag2_get(swigCPtr);
      return ret;
    } 
  }

  public uint cell_flag_override {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_cell_flag_override_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_cell_flag_override_get(swigCPtr);
      return ret;
    } 
  }

  public byte virtual_edge_flag {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_virtual_edge_flag_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_virtual_edge_flag_get(swigCPtr);
      return ret;
    } 
  }

  public ushort cell_alignment {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_cell_alignment_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_cell_alignment_get(swigCPtr);
      return ret;
    } 
  }

  public byte background_fill_none {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_background_fill_none_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_background_fill_none_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Color background_color {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_background_color_set(swigCPtr, Dwg_Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_background_color_get(swigCPtr);
      Dwg_Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Color(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Color content_color {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_content_color_set(swigCPtr, Dwg_Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_content_color_get(swigCPtr);
      Dwg_Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Color(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Object_Ref text_style {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_text_style_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_text_style_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public double text_height {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_text_height_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_text_height_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Color top_grid_color {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_top_grid_color_set(swigCPtr, Dwg_Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_top_grid_color_get(swigCPtr);
      Dwg_Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Color(cPtr, false);
      return ret;
    } 
  }

  public ushort top_grid_linewt {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_top_grid_linewt_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_top_grid_linewt_get(swigCPtr);
      return ret;
    } 
  }

  public ushort top_visibility {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_top_visibility_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_top_visibility_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Color right_grid_color {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_right_grid_color_set(swigCPtr, Dwg_Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_right_grid_color_get(swigCPtr);
      Dwg_Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Color(cPtr, false);
      return ret;
    } 
  }

  public ushort right_grid_linewt {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_right_grid_linewt_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_right_grid_linewt_get(swigCPtr);
      return ret;
    } 
  }

  public ushort right_visibility {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_right_visibility_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_right_visibility_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Color bottom_grid_color {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_bottom_grid_color_set(swigCPtr, Dwg_Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_bottom_grid_color_get(swigCPtr);
      Dwg_Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Color(cPtr, false);
      return ret;
    } 
  }

  public ushort bottom_grid_linewt {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_bottom_grid_linewt_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_bottom_grid_linewt_get(swigCPtr);
      return ret;
    } 
  }

  public ushort bottom_visibility {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_bottom_visibility_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_bottom_visibility_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Color left_grid_color {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_left_grid_color_set(swigCPtr, Dwg_Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_left_grid_color_get(swigCPtr);
      Dwg_Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Color(cPtr, false);
      return ret;
    } 
  }

  public ushort left_grid_linewt {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_left_grid_linewt_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_left_grid_linewt_get(swigCPtr);
      return ret;
    } 
  }

  public ushort left_visibility {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_left_visibility_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_left_visibility_get(swigCPtr);
      return ret;
    } 
  }

  public uint unknown {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_unknown_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_unknown_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_TABLE_value value {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_value_set(swigCPtr, Dwg_TABLE_value.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_value_get(swigCPtr);
      Dwg_TABLE_value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_TABLE_value(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Object_Ref cell_handle {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_cell_handle_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_cell_handle_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public ushort num_attr_defs {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_num_attr_defs_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_TABLE_Cell_num_attr_defs_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_p__dwg_object_ref attr_def_id {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_attr_def_id_set(swigCPtr, SWIGTYPE_p_p__dwg_object_ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_attr_def_id_get(swigCPtr);
      SWIGTYPE_p_p__dwg_object_ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p__dwg_object_ref(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Object_Ref text_style_override {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_text_style_override_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_text_style_override_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Entity_TABLE parent {
    set {
      LibreDWGPINVOKE.Dwg_TABLE_Cell_parent_set(swigCPtr, Dwg_Entity_TABLE.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_TABLE_Cell_parent_get(swigCPtr);
      Dwg_Entity_TABLE ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Entity_TABLE(cPtr, false);
      return ret;
    } 
  }

  public Dwg_TABLE_Cell() : this(LibreDWGPINVOKE.new_Dwg_TABLE_Cell(), true) {
  }

}
