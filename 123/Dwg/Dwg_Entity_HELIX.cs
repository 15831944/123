//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Dwg_Entity_HELIX : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dwg_Entity_HELIX(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dwg_Entity_HELIX obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dwg_Entity_HELIX() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibreDWGPINVOKE.delete_Dwg_Entity_HELIX(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Dwg_Object_Entity parent {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_parent_set(swigCPtr, Dwg_Object_Entity.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_HELIX_parent_get(swigCPtr);
      Dwg_Object_Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Entity(cPtr, false);
      return ret;
    } 
  }

  public ushort flag {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_flag_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_flag_get(swigCPtr);
      return ret;
    } 
  }

  public ushort scenario {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_scenario_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_scenario_get(swigCPtr);
      return ret;
    } 
  }

  public ushort degree {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_degree_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_degree_get(swigCPtr);
      return ret;
    } 
  }

  public uint splineflags1 {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_splineflags1_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_splineflags1_get(swigCPtr);
      return ret;
    } 
  }

  public uint knotparam {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_knotparam_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_knotparam_get(swigCPtr);
      return ret;
    } 
  }

  public double fit_tol {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_fit_tol_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_fit_tol_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD beg_tan_vec {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_beg_tan_vec_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_HELIX_beg_tan_vec_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD end_tan_vec {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_end_tan_vec_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_HELIX_end_tan_vec_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public byte rational {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_rational_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_rational_get(swigCPtr);
      return ret;
    } 
  }

  public byte closed_b {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_closed_b_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_closed_b_get(swigCPtr);
      return ret;
    } 
  }

  public byte periodic {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_periodic_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_periodic_get(swigCPtr);
      return ret;
    } 
  }

  public byte weighted {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_weighted_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_weighted_get(swigCPtr);
      return ret;
    } 
  }

  public double knot_tol {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_knot_tol_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_knot_tol_get(swigCPtr);
      return ret;
    } 
  }

  public double ctrl_tol {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_ctrl_tol_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_ctrl_tol_get(swigCPtr);
      return ret;
    } 
  }

  public ushort num_fit_pts {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_num_fit_pts_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_num_fit_pts_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD fit_pts {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_fit_pts_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_HELIX_fit_pts_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public uint num_knots {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_num_knots_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_num_knots_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_double knots {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_knots_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_HELIX_knots_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public uint num_ctrl_pts {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_num_ctrl_pts_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_num_ctrl_pts_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_SPLINE_control_point ctrl_pts {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_ctrl_pts_set(swigCPtr, Dwg_SPLINE_control_point.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_HELIX_ctrl_pts_get(swigCPtr);
      Dwg_SPLINE_control_point ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_SPLINE_control_point(cPtr, false);
      return ret;
    } 
  }

  public ushort major_version {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_major_version_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_major_version_get(swigCPtr);
      return ret;
    } 
  }

  public ushort maint_version {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_maint_version_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_maint_version_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD axis_base_pt {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_axis_base_pt_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_HELIX_axis_base_pt_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD start_pt {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_start_pt_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_HELIX_start_pt_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD axis_vector {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_axis_vector_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_HELIX_axis_vector_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public double radius {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_radius_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_radius_get(swigCPtr);
      return ret;
    } 
  }

  public double num_turns {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_num_turns_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_num_turns_get(swigCPtr);
      return ret;
    } 
  }

  public double turn_height {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_turn_height_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_turn_height_get(swigCPtr);
      return ret;
    } 
  }

  public byte handedness {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_handedness_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_handedness_get(swigCPtr);
      return ret;
    } 
  }

  public ushort constraint_type {
    set {
      LibreDWGPINVOKE.Dwg_Entity_HELIX_constraint_type_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_HELIX_constraint_type_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Entity_HELIX() : this(LibreDWGPINVOKE.new_Dwg_Entity_HELIX(), true) {
  }

}
