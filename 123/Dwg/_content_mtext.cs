//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class _content_mtext : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal _content_mtext(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(_content_mtext obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~_content_mtext() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibreDWGPINVOKE.delete__content_mtext(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string default_text {
    set {
      LibreDWGPINVOKE._content_mtext_default_text_set(swigCPtr, value);
    } 
    get {
      string ret = LibreDWGPINVOKE._content_mtext_default_text_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD normal {
    set {
      LibreDWGPINVOKE._content_mtext_normal_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE._content_mtext_normal_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Object_Ref style {
    set {
      LibreDWGPINVOKE._content_mtext_style_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE._content_mtext_style_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD location {
    set {
      LibreDWGPINVOKE._content_mtext_location_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE._content_mtext_location_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD direction {
    set {
      LibreDWGPINVOKE._content_mtext_direction_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE._content_mtext_direction_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public double rotation {
    set {
      LibreDWGPINVOKE._content_mtext_rotation_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE._content_mtext_rotation_get(swigCPtr);
      return ret;
    } 
  }

  public double width {
    set {
      LibreDWGPINVOKE._content_mtext_width_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE._content_mtext_width_get(swigCPtr);
      return ret;
    } 
  }

  public double height {
    set {
      LibreDWGPINVOKE._content_mtext_height_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE._content_mtext_height_get(swigCPtr);
      return ret;
    } 
  }

  public double line_spacing_factor {
    set {
      LibreDWGPINVOKE._content_mtext_line_spacing_factor_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE._content_mtext_line_spacing_factor_get(swigCPtr);
      return ret;
    } 
  }

  public ushort line_spacing_style {
    set {
      LibreDWGPINVOKE._content_mtext_line_spacing_style_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE._content_mtext_line_spacing_style_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Color color {
    set {
      LibreDWGPINVOKE._content_mtext_color_set(swigCPtr, Dwg_Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE._content_mtext_color_get(swigCPtr);
      Dwg_Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Color(cPtr, false);
      return ret;
    } 
  }

  public ushort alignment {
    set {
      LibreDWGPINVOKE._content_mtext_alignment_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE._content_mtext_alignment_get(swigCPtr);
      return ret;
    } 
  }

  public ushort flow {
    set {
      LibreDWGPINVOKE._content_mtext_flow_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE._content_mtext_flow_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Color bg_color {
    set {
      LibreDWGPINVOKE._content_mtext_bg_color_set(swigCPtr, Dwg_Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE._content_mtext_bg_color_get(swigCPtr);
      Dwg_Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Color(cPtr, false);
      return ret;
    } 
  }

  public double bg_scale {
    set {
      LibreDWGPINVOKE._content_mtext_bg_scale_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE._content_mtext_bg_scale_get(swigCPtr);
      return ret;
    } 
  }

  public uint bg_transparency {
    set {
      LibreDWGPINVOKE._content_mtext_bg_transparency_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE._content_mtext_bg_transparency_get(swigCPtr);
      return ret;
    } 
  }

  public byte is_bg_fill {
    set {
      LibreDWGPINVOKE._content_mtext_is_bg_fill_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE._content_mtext_is_bg_fill_get(swigCPtr);
      return ret;
    } 
  }

  public byte is_bg_mask_fill {
    set {
      LibreDWGPINVOKE._content_mtext_is_bg_mask_fill_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE._content_mtext_is_bg_mask_fill_get(swigCPtr);
      return ret;
    } 
  }

  public ushort col_type {
    set {
      LibreDWGPINVOKE._content_mtext_col_type_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE._content_mtext_col_type_get(swigCPtr);
      return ret;
    } 
  }

  public byte is_height_auto {
    set {
      LibreDWGPINVOKE._content_mtext_is_height_auto_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE._content_mtext_is_height_auto_get(swigCPtr);
      return ret;
    } 
  }

  public double col_width {
    set {
      LibreDWGPINVOKE._content_mtext_col_width_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE._content_mtext_col_width_get(swigCPtr);
      return ret;
    } 
  }

  public double col_gutter {
    set {
      LibreDWGPINVOKE._content_mtext_col_gutter_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE._content_mtext_col_gutter_get(swigCPtr);
      return ret;
    } 
  }

  public byte is_col_flow_reversed {
    set {
      LibreDWGPINVOKE._content_mtext_is_col_flow_reversed_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE._content_mtext_is_col_flow_reversed_get(swigCPtr);
      return ret;
    } 
  }

  public uint num_col_sizes {
    set {
      LibreDWGPINVOKE._content_mtext_num_col_sizes_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE._content_mtext_num_col_sizes_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_double col_sizes {
    set {
      LibreDWGPINVOKE._content_mtext_col_sizes_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE._content_mtext_col_sizes_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public byte word_break {
    set {
      LibreDWGPINVOKE._content_mtext_word_break_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE._content_mtext_word_break_get(swigCPtr);
      return ret;
    } 
  }

  public byte unknown {
    set {
      LibreDWGPINVOKE._content_mtext_unknown_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE._content_mtext_unknown_get(swigCPtr);
      return ret;
    } 
  }

  public _content_mtext() : this(LibreDWGPINVOKE.new__content_mtext(), true) {
  }

}
