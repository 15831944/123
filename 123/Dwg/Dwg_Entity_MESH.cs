//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Dwg_Entity_MESH : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dwg_Entity_MESH(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dwg_Entity_MESH obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dwg_Entity_MESH() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibreDWGPINVOKE.delete_Dwg_Entity_MESH(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Dwg_Object_Entity parent {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_parent_set(swigCPtr, Dwg_Object_Entity.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_MESH_parent_get(swigCPtr);
      Dwg_Object_Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Entity(cPtr, false);
      return ret;
    } 
  }

  public uint class_version {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_class_version_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_MESH_class_version_get(swigCPtr);
      return ret;
    } 
  }

  public byte dlevel {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_dlevel_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_MESH_dlevel_get(swigCPtr);
      return ret;
    } 
  }

  public byte is_watertight {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_is_watertight_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_MESH_is_watertight_get(swigCPtr);
      return ret;
    } 
  }

  public uint num_subdiv_vertex {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_num_subdiv_vertex_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_MESH_num_subdiv_vertex_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD subdiv_vertex {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_subdiv_vertex_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_MESH_subdiv_vertex_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public uint num_vertex {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_num_vertex_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_MESH_num_vertex_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD vertex {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_vertex_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_MESH_vertex_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public uint num_faces {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_num_faces_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_MESH_num_faces_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_unsigned_int faces {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_faces_set(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_MESH_faces_get(swigCPtr);
      SWIGTYPE_p_unsigned_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
      return ret;
    } 
  }

  public uint num_edges {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_num_edges_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_MESH_num_edges_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_MESH_edge edges {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_edges_set(swigCPtr, Dwg_MESH_edge.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_MESH_edges_get(swigCPtr);
      Dwg_MESH_edge ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_MESH_edge(cPtr, false);
      return ret;
    } 
  }

  public uint num_crease {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_num_crease_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_MESH_num_crease_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_double crease {
    set {
      LibreDWGPINVOKE.Dwg_Entity_MESH_crease_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_MESH_crease_get(swigCPtr);
      SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Entity_MESH() : this(LibreDWGPINVOKE.new_Dwg_Entity_MESH(), true) {
  }

}
