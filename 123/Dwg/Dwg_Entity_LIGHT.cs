//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Dwg_Entity_LIGHT : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dwg_Entity_LIGHT(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dwg_Entity_LIGHT obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dwg_Entity_LIGHT() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibreDWGPINVOKE.delete_Dwg_Entity_LIGHT(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Dwg_Object_Entity parent {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_parent_set(swigCPtr, Dwg_Object_Entity.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_LIGHT_parent_get(swigCPtr);
      Dwg_Object_Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Entity(cPtr, false);
      return ret;
    } 
  }

  public uint class_version {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_class_version_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_class_version_get(swigCPtr);
      return ret;
    } 
  }

  public string name {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_name_set(swigCPtr, value);
    } 
    get {
      string ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_name_get(swigCPtr);
      return ret;
    } 
  }

  public ushort type {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_type_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_type_get(swigCPtr);
      return ret;
    } 
  }

  public byte status {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_status_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_status_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Color color {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_color_set(swigCPtr, Dwg_Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_LIGHT_color_get(swigCPtr);
      Dwg_Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Color(cPtr, false);
      return ret;
    } 
  }

  public byte plot_glyph {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_plot_glyph_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_plot_glyph_get(swigCPtr);
      return ret;
    } 
  }

  public double intensity {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_intensity_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_intensity_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD position {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_position_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_LIGHT_position_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD target {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_target_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_LIGHT_target_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public ushort attenuation_type {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_attenuation_type_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_attenuation_type_get(swigCPtr);
      return ret;
    } 
  }

  public byte use_attenuation_limits {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_use_attenuation_limits_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_use_attenuation_limits_get(swigCPtr);
      return ret;
    } 
  }

  public double attenuation_start_limit {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_attenuation_start_limit_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_attenuation_start_limit_get(swigCPtr);
      return ret;
    } 
  }

  public double attenuation_end_limit {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_attenuation_end_limit_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_attenuation_end_limit_get(swigCPtr);
      return ret;
    } 
  }

  public double hotspot_angle {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_hotspot_angle_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_hotspot_angle_get(swigCPtr);
      return ret;
    } 
  }

  public double falloff_angle {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_falloff_angle_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_falloff_angle_get(swigCPtr);
      return ret;
    } 
  }

  public byte cast_shadows {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_cast_shadows_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_cast_shadows_get(swigCPtr);
      return ret;
    } 
  }

  public ushort shadow_type {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_shadow_type_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_shadow_type_get(swigCPtr);
      return ret;
    } 
  }

  public ushort shadow_map_size {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_shadow_map_size_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_shadow_map_size_get(swigCPtr);
      return ret;
    } 
  }

  public byte shadow_map_softness {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_shadow_map_softness_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_LIGHT_shadow_map_softness_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Object_Ref lights_layer {
    set {
      LibreDWGPINVOKE.Dwg_Entity_LIGHT_lights_layer_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_LIGHT_lights_layer_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Entity_LIGHT() : this(LibreDWGPINVOKE.new_Dwg_Entity_LIGHT(), true) {
  }

}
