//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Dwg_LEADER_Node : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dwg_LEADER_Node(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dwg_LEADER_Node obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dwg_LEADER_Node() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibreDWGPINVOKE.delete_Dwg_LEADER_Node(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Dwg_Entity_MULTILEADER parent {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_parent_set(swigCPtr, Dwg_Entity_MULTILEADER.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_LEADER_Node_parent_get(swigCPtr);
      Dwg_Entity_MULTILEADER ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Entity_MULTILEADER(cPtr, false);
      return ret;
    } 
  }

  public byte has_lastleaderlinepoint {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_has_lastleaderlinepoint_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_LEADER_Node_has_lastleaderlinepoint_get(swigCPtr);
      return ret;
    } 
  }

  public byte has_dogleg {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_has_dogleg_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_LEADER_Node_has_dogleg_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD lastleaderlinepoint {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_lastleaderlinepoint_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_LEADER_Node_lastleaderlinepoint_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD dogleg_vector {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_dogleg_vector_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_LEADER_Node_dogleg_vector_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public uint branch_index {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_branch_index_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_LEADER_Node_branch_index_get(swigCPtr);
      return ret;
    } 
  }

  public double dogleg_length {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_dogleg_length_set(swigCPtr, value);
    } 
    get {
      double ret = LibreDWGPINVOKE.Dwg_LEADER_Node_dogleg_length_get(swigCPtr);
      return ret;
    } 
  }

  public uint num_lines {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_num_lines_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_LEADER_Node_num_lines_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_LEADER_Line lines {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_lines_set(swigCPtr, Dwg_LEADER_Line.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_LEADER_Node_lines_get(swigCPtr);
      Dwg_LEADER_Line ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_LEADER_Line(cPtr, false);
      return ret;
    } 
  }

  public uint num_breaks {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_num_breaks_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_LEADER_Node_num_breaks_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_LEADER_Break breaks {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_breaks_set(swigCPtr, Dwg_LEADER_Break.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_LEADER_Node_breaks_get(swigCPtr);
      Dwg_LEADER_Break ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_LEADER_Break(cPtr, false);
      return ret;
    } 
  }

  public ushort attach_dir {
    set {
      LibreDWGPINVOKE.Dwg_LEADER_Node_attach_dir_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_LEADER_Node_attach_dir_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_LEADER_Node() : this(LibreDWGPINVOKE.new_Dwg_LEADER_Node(), true) {
  }

}
