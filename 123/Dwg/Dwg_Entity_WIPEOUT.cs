//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Dwg_Entity_WIPEOUT : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Dwg_Entity_WIPEOUT(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Dwg_Entity_WIPEOUT obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Dwg_Entity_WIPEOUT() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LibreDWGPINVOKE.delete_Dwg_Entity_WIPEOUT(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Dwg_Object_Entity parent {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_parent_set(swigCPtr, Dwg_Object_Entity.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_parent_get(swigCPtr);
      Dwg_Object_Entity ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Entity(cPtr, false);
      return ret;
    } 
  }

  public uint class_version {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_class_version_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_class_version_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD pt0 {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_pt0_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_pt0_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD uvec {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_uvec_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_uvec_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_3BD vvec {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_vvec_set(swigCPtr, Dwg_Bitcode_3BD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_vvec_get(swigCPtr);
      Dwg_Bitcode_3BD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_3BD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Bitcode_2RD size {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_size_set(swigCPtr, Dwg_Bitcode_2RD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_size_get(swigCPtr);
      Dwg_Bitcode_2RD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_2RD(cPtr, false);
      return ret;
    } 
  }

  public ushort display_props {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_display_props_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_display_props_get(swigCPtr);
      return ret;
    } 
  }

  public byte clipping {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_clipping_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_clipping_get(swigCPtr);
      return ret;
    } 
  }

  public byte brightness {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_brightness_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_brightness_get(swigCPtr);
      return ret;
    } 
  }

  public byte contrast {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_contrast_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_contrast_get(swigCPtr);
      return ret;
    } 
  }

  public byte fade {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_fade_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_fade_get(swigCPtr);
      return ret;
    } 
  }

  public byte clip_mode {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_clip_mode_set(swigCPtr, value);
    } 
    get {
      byte ret = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_clip_mode_get(swigCPtr);
      return ret;
    } 
  }

  public ushort clip_boundary_type {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_clip_boundary_type_set(swigCPtr, value);
    } 
    get {
      ushort ret = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_clip_boundary_type_get(swigCPtr);
      return ret;
    } 
  }

  public uint num_clip_verts {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_num_clip_verts_set(swigCPtr, value);
    } 
    get {
      uint ret = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_num_clip_verts_get(swigCPtr);
      return ret;
    } 
  }

  public Dwg_Bitcode_2RD clip_verts {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_clip_verts_set(swigCPtr, Dwg_Bitcode_2RD.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_clip_verts_get(swigCPtr);
      Dwg_Bitcode_2RD ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Bitcode_2RD(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Object_Ref imagedef {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_imagedef_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_imagedef_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Object_Ref imagedefreactor {
    set {
      LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_imagedefreactor_set(swigCPtr, Dwg_Object_Ref.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = LibreDWGPINVOKE.Dwg_Entity_WIPEOUT_imagedefreactor_get(swigCPtr);
      Dwg_Object_Ref ret = (cPtr == global::System.IntPtr.Zero) ? null : new Dwg_Object_Ref(cPtr, false);
      return ret;
    } 
  }

  public Dwg_Entity_WIPEOUT() : this(LibreDWGPINVOKE.new_Dwg_Entity_WIPEOUT(), true) {
  }

}
